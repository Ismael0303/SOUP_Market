# debugging/scripts/test_fase3_niam.py

import requests
import json
import sys
import os
from datetime import date, datetime, timedelta

# Configuraci√≥n
BASE_URL = "http://127.0.0.1:8000"
TEST_EMAIL = "ismaeldimenza@hotmail.com"
TEST_PASSWORD = "ismael38772433"

def test_fase3_niam():
    """Test completo de la Fase 3: Optimizaci√≥n para Panader√≠a √ëiam"""
    
    print("ü•ñ TESTEANDO FASE 3: OPTIMIZACI√ìN PARA PANADER√çA √ëIAM")
    print("=" * 70)
    
    # 1. Login para obtener token
    print("\n1. üîê Login para obtener token")
    try:
        login_data = {
            "username": TEST_EMAIL,
            "password": TEST_PASSWORD
        }
        response = requests.post(f"{BASE_URL}/users/login", data=login_data)
        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data.get("access_token")
            print(f"‚úÖ Login exitoso")
            print(f"‚úÖ Token obtenido: {access_token[:20]}...")
        else:
            print(f"‚ùå Error en login: {response.status_code}")
            print(f"   {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    
    # Headers con token
    headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    
    # 2. Test dashboard especializado
    print("\n2. üìä Test dashboard especializado")
    try:
        response = requests.get(f"{BASE_URL}/niam/dashboard", headers=headers)
        if response.status_code == 200:
            dashboard = response.json()
            print(f"‚úÖ Dashboard obtenido")
            print(f"‚úÖ Negocio: {dashboard['negocio']['nombre']}")
            print(f"‚úÖ Ventas Chip√°: {dashboard['metricas_mes']['ventas_chipa']}")
            print(f"‚úÖ Ventas totales: ${dashboard['metricas_mes']['ventas_totales']}")
            print(f"‚úÖ Productos m√°s vendidos: {len(dashboard['productos_mas_vendidos'])}")
            print(f"‚úÖ Alertas: {dashboard['alertas']['stock_bajo']} stock bajo, {dashboard['alertas']['por_vencer']} por vencer")
            print(f"‚úÖ Horarios pico: {len(dashboard['horarios_pico'])} configurados")
        else:
            print(f"‚ùå Error obteniendo dashboard: {response.status_code}")
            print(f"   {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    
    # 3. Test recetas de Chip√°
    print("\n3. üìñ Test recetas de Chip√°")
    try:
        response = requests.get(f"{BASE_URL}/niam/recetas", headers=headers)
        if response.status_code == 200:
            recetas = response.json()
            print(f"‚úÖ Recetas obtenidas")
            print(f"‚úÖ Total recetas: {len(recetas['recetas'])}")
            if recetas['recetas']:
                primera_receta = recetas['recetas'][0]
                print(f"‚úÖ Primera receta: {primera_receta['nombre']}")
                print(f"‚úÖ Dificultad: {primera_receta['dificultad']}")
                print(f"‚úÖ Ingredientes: {primera_receta['ingredientes_count']}")
        else:
            print(f"‚ùå Error obteniendo recetas: {response.status_code}")
            print(f"   {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    
    # 4. Test producciones
    print("\n4. üè≠ Test producciones")
    try:
        response = requests.get(f"{BASE_URL}/niam/produccion", headers=headers)
        if response.status_code == 200:
            producciones = response.json()
            print(f"‚úÖ Producciones obtenidas")
            print(f"‚úÖ Total producciones: {len(producciones['producciones'])}")
            if producciones['producciones']:
                primera_prod = producciones['producciones'][0]
                print(f"‚úÖ Primera producci√≥n: {primera_prod['receta']}")
                print(f"‚úÖ Estado: {primera_prod['estado']}")
                print(f"‚úÖ Productor: {primera_prod['productor']}")
        else:
            print(f"‚ùå Error obteniendo producciones: {response.status_code}")
            print(f"   {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    
    # 5. Test an√°lisis espec√≠fico de Chip√°
    print("\n5. üìà Test an√°lisis espec√≠fico de Chip√°")
    try:
        fecha_inicio = (date.today() - timedelta(days=30)).isoformat()
        fecha_fin = date.today().isoformat()
        
        response = requests.get(
            f"{BASE_URL}/niam/analisis/chipa",
            params={
                "fecha_inicio": fecha_inicio,
                "fecha_fin": fecha_fin
            },
            headers=headers
        )
        if response.status_code == 200:
            analisis = response.json()
            print(f"‚úÖ An√°lisis de Chip√° obtenido")
            print(f"‚úÖ Per√≠odo: {analisis['periodo']['fecha_inicio']} a {analisis['periodo']['fecha_fin']}")
            print(f"‚úÖ Cantidad vendida: {analisis['totales']['cantidad_vendida']}")
            print(f"‚úÖ Total ventas: ${analisis['totales']['total_ventas']}")
            print(f"‚úÖ Precio promedio: ${analisis['totales']['precio_promedio']}")
            print(f"‚úÖ Ventas por d√≠a: {len(analisis['ventas_por_dia'])}")
            print(f"‚úÖ Ventas por hora: {len(analisis['ventas_por_hora'])}")
        else:
            print(f"‚ùå Error obteniendo an√°lisis: {response.status_code}")
            print(f"   {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    
    # 6. Test alertas espec√≠ficas
    print("\n6. ‚ö†Ô∏è Test alertas espec√≠ficas")
    try:
        response = requests.get(f"{BASE_URL}/niam/alertas", headers=headers)
        if response.status_code == 200:
            alertas = response.json()
            print(f"‚úÖ Alertas obtenidas")
            print(f"‚úÖ Insumos cr√≠ticos: {len(alertas['insumos_criticos'])}")
            print(f"‚úÖ Productos por vencer: {len(alertas['productos_por_vencer'])}")
            print(f"‚úÖ Producciones pendientes: {len(alertas['producciones_pendientes'])}")
            
            if alertas['insumos_criticos']:
                primer_insumo = alertas['insumos_criticos'][0]
                print(f"‚úÖ Primer insumo cr√≠tico: {primer_insumo['nombre']}")
                print(f"‚úÖ Stock disponible: {primer_insumo['stock_disponible']} {primer_insumo['unidad_medida']}")
        else:
            print(f"‚ùå Error obteniendo alertas: {response.status_code}")
            print(f"   {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    
    # 7. Test endpoints del sistema de ventas mejorado
    print("\n7. üí∞ Test sistema de ventas mejorado")
    try:
        # Obtener negocios para usar en las pruebas
        response = requests.get(f"{BASE_URL}/businesses/", headers=headers)
        if response.status_code == 200:
            negocios = response.json()
            if negocios:
                negocio_id = negocios[0]["id"]
                
                # Test an√°lisis de ventas
                fecha_inicio = (date.today() - timedelta(days=7)).isoformat()
                fecha_fin = date.today().isoformat()
                
                response = requests.get(
                    f"{BASE_URL}/ventas/analisis/{negocio_id}",
                    params={
                        "fecha_inicio": fecha_inicio,
                        "fecha_fin": fecha_fin
                    },
                    headers=headers
                )
                if response.status_code == 200:
                    analisis = response.json()
                    print(f"‚úÖ An√°lisis de ventas obtenido")
                    print(f"‚úÖ Total ventas: ${analisis.get('total_ventas', 0)}")
                    print(f"‚úÖ Productos vendidos: {analisis.get('total_productos_vendidos', 0)}")
                    print(f"‚úÖ Margen total: ${analisis.get('margen_ganancia_total', 0)}")
                else:
                    print(f"‚ùå Error obteniendo an√°lisis de ventas: {response.status_code}")
            else:
                print("‚ö†Ô∏è No se encontraron negocios para probar")
        else:
            print(f"‚ùå Error obteniendo negocios: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return False
    
    print("\n" + "=" * 70)
    print("üéâ FASE 3 COMPLETADA EXITOSAMENTE")
    print("‚úÖ Optimizaci√≥n para Panader√≠a √ëiam funcionando correctamente")
    print("‚úÖ Dashboard especializado operativo")
    print("‚úÖ Sistema de roles implementado")
    print("‚úÖ Gesti√≥n de recetas disponible")
    print("‚úÖ Control de producci√≥n activo")
    print("‚úÖ An√°lisis espec√≠fico de Chip√° funcionando")
    print("‚úÖ Alertas especializadas operativas")
    return True

if __name__ == "__main__":
    success = test_fase3_niam()
    sys.exit(0 if success else 1) 